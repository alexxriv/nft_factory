{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","totalSupply","colors","componentDidMount","setState","eth","getAccounts","net","getId","networkId","deployedNetwork","Color","networks","Contract","abi","address","methods","call","i","color","concat","alert","error","mint","newColor","toString","send","from","once","receipt","this","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.170f5335.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Color from \"./contracts/Color.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {web3: null, accounts: \"\", contract: null, totalSupply: 0, colors: [] };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      //set web3 to state\n      this.setState({web3})\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Color.networks[networkId];\n\n      if (deployedNetwork){\n          const contract = new web3.eth.Contract(\n            Color.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n\n          // Set accounts, and contract to the state\n          this.setState({accounts, contract });\n\n\n          //totalSupply (call=read data, send= write data)\n          const totalSupply = await contract.methods.totalSupply().call()\n          this.setState({totalSupply})\n\n          //Load NFT tokens (Colors) to website, similar to test file\n          for (var i=1; i <= totalSupply; i++) {\n\n            const color = \"#\".concat(await contract.methods.colors(i-1).call()) \n            this.setState({\n              colors: [...this.state.colors, color] //... = appends color to array \"colors\"\n            })\n          }\n          console.log(this.state.colors)\n\n\n      } else {\n        window.alert(\"Smart Contract not deployed to detected network\");\n\n      }\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  mint = async (color) => {\n\n    let newColor = \"#\".concat(color)\n    //when changing state of contract use send\n    newColor= newColor.toString()\n    this.state.contract.methods.mint(newColor).send({\n      from: this.state.accounts[0]\n    }).once('receipt', (receipt) => {\n      this.setState({\n        colors: [...this.state.colors, newColor.toString()]\n      })\n      \n    })\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    if(!this.state.contract){\n      return <div>Contract not deployed in detected network</div>;\n    }\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://www.criptoeconomia.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            NFT Factory\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.accounts}</span></small>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n              <h1>Issue new NFT </h1>\n              <form onSubmit= {(event) => {\n                event.preventDefault(); \n                const color = this.color.value.toString();\n                this.mint(color);\n              }}>\n                <input \n                  type= \"text\"\n                  className= 'form-control mb-1'\n                  placeholder= 'e.g. FFFFFF'\n                  ref= {(input) => {this.color = input}}\n                />\n                <input \n                type='submit' \n                className='btn btn-block btn-primary'\n                value= \"MINT\"\n                />\n              </form>\n\n\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n            {this.state.colors.map((color, key) => {\n              return (\n                <div key = {key} className=\"col-md-3 mb-3\">\n                <div className= \"token\" style={{backgroundColor: color}}></div>\n                <div> {color} </div>\n                </div>\n                )\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}